/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EventManagerWorkArea;

import Business.Beneficiaries.Beneficiary;
import Business.EcoSystem;
import Business.Enterprise.WelfareEnterprise;
import Business.Event.Event;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.WelfareOrganization;
import Business.UserAccount.UserAccount;
import java.awt.Font;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sindhu
 */
public class EventManagerWorkAreaPanel extends javax.swing.JPanel {

     WelfareEnterprise enterprise;
    EcoSystem ecosystem;
    JPanel userProcessContainer;
    Organization organization;
    String updateStatus=null;
    int cont_id=0;
    /**
     * Creates new form EventManagerWorkAreaPanel
     */
   
    public EventManagerWorkAreaPanel(JPanel userProcessContainer, EcoSystem system, WelfareEnterprise enterprise, Organization organization, UserAccount account) {
       initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.ecosystem = system;
        this.organization = organization;
        eventJTable.getTableHeader().setFont(new Font("TImes New Roman",Font.BOLD,18));
        eventJTable.setRowHeight(30);
        eventJTable.setRowMargin(10);
        populateTable();
    }

   
    
     public void populateTable(){
        
        DefaultTableModel model = (DefaultTableModel)eventJTable.getModel();
        model.setRowCount(0);
        if(enterprise.getEventDirectory()!=null){
            for(Event event:enterprise.getEventDirectory().getEventDirectory()){
                if(event.getEventId()!=0){
                   Object[] row = new Object[model.getColumnCount()];
                    row[0] = event.getEventId();
                    row[1] = event.getEventName();
                    row[2] = event.getEventOrganiser();
                    if(event.getStatus()==null){
                            row[3] = "Available";
                    }else{      
                        row[3] = event.getStatus();
                    }
                    model.addRow(row); 
                }
            }
        }
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        eventJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        eventnameJTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        fundscollectedJTextField1 = new javax.swing.JTextField();
        addJButton = new javax.swing.JButton();
        assignBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        evtCity = new javax.swing.JTextField();
        imgLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(140, 218, 218));
        setLayout(null);

        eventJTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        eventJTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        eventJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event Id", "Event Name", "Event Organiser", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventJTable.setRowHeight(20);
        jScrollPane1.setViewportView(eventJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(580, 210, 523, 140);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Event Name:");
        add(jLabel2);
        jLabel2.setBounds(670, 390, 150, 28);

        eventnameJTextField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        eventnameJTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(102, 0, 102)));
        add(eventnameJTextField);
        eventnameJTextField.setBounds(840, 380, 160, 40);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel6.setText("Funds Collected:");
        add(jLabel6);
        jLabel6.setBounds(630, 500, 180, 28);

        fundscollectedJTextField1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(102, 0, 102)));
        add(fundscollectedJTextField1);
        fundscollectedJTextField1.setBounds(840, 500, 160, 40);

        addJButton.setBackground(new java.awt.Color(153, 102, 0));
        addJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addJButton.setText("Add  Event");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        add(addJButton);
        addJButton.setBounds(670, 580, 120, 40);

        assignBtn.setBackground(new java.awt.Color(153, 102, 0));
        assignBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assignBtn.setText("Assign to a benificiary");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });
        add(assignBtn);
        assignBtn.setBounds(880, 580, 220, 40);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Event City:");
        add(jLabel1);
        jLabel1.setBounds(680, 440, 120, 28);

        evtCity.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        evtCity.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(102, 0, 102)));
        evtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evtCityActionPerformed(evt);
            }
        });
        add(evtCity);
        evtCity.setBounds(840, 440, 160, 40);

        imgLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\Sindhu\\Documents\\AED\\finalproject\\EcoSystem (1)\\EcoSystem\\src\\don.png")); // NOI18N
        add(imgLabel);
        imgLabel.setBounds(20, 90, 1560, 660);
    }// </editor-fold>//GEN-END:initComponents

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
       DefaultTableModel model = (DefaultTableModel)eventJTable.getModel();
       
       int event_id = model.getRowCount()+1;
        String event_name= eventnameJTextField.getText();
        String event_fundscollected= fundscollectedJTextField1.getText();
        String event_city = evtCity.getText();
        
        if(eventnameJTextField.getText().trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter a event name","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
        enterprise.getEventDirectory().addEvent(event_id,event_name,enterprise.getName(),event_city,event_fundscollected,null);
        populateTable();
        JOptionPane.showMessageDialog(null, "Event Added Successfully");
        }
        
       
    }//GEN-LAST:event_addJButtonActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)eventJTable.getModel();
        int selectedRow = eventJTable.getSelectedRow();
        int ben_id =0;
        if(selectedRow <0 ){
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning!",JOptionPane.WARNING_MESSAGE);
        }
        else{
            String entName = (String) eventJTable.getValueAt(selectedRow,2);
            String availability = (String) eventJTable.getValueAt(selectedRow,3);
            if(availability.equals("Not Available")){
                JOptionPane.showMessageDialog(null,"This resource is not available to assign.Please select available resources", "Error",JOptionPane.ERROR_MESSAGE);
            }else{
                cont_id = (int) eventJTable.getValueAt(selectedRow,0);
                ben_id = getFirstBeneficiary(entName);
                if(ben_id==0){
                    JOptionPane.showMessageDialog(null,"No more Beneficiary seeking for help from this enterprise", "Error",JOptionPane.ERROR_MESSAGE);
                    assignBtn.setEnabled(false);
                }else{
                    if(assignBtn.isEnabled()==false){
                        assignBtn.setEnabled(true);
                    }
                    for(Network net:ecosystem.getNetworkList()){
                        for(WelfareEnterprise ent:net.getEnterpriseDirectory().getWelfareEnterpriseList()){
                            if(ent.getName().equals(enterprise.getName())){
                                for(WelfareOrganization org:ent.getWelfareOrganizationDirectory().getWelfareOrganizationList()){
                                    if(org.getName().equals("Beneficiary Organization")){
                                        for(Beneficiary ben:org.getBeneficiaryDirectory().getBeneficiaryDirectory()){
                                            if(ben_id==ben.getBeneficiaryId()){
                                                ben.setStatus("Assigned"+ben.getAssistanceType());
                                                updateStatus = "Not Available";
                                                updateStatus(updateStatus,cont_id);
                                                populateTable();
                                                JOptionPane.showMessageDialog(null, "Assigned required assistance to next available beneficiary"+ben.getBeneficiaryName()+"and his id is"+ben.getBeneficiaryId(), "Success",JOptionPane.PLAIN_MESSAGE);
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }

        }

    }//GEN-LAST:event_assignBtnActionPerformed

    private void evtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evtCityActionPerformed
    private void updateStatus(String updateStatus,int cont_id){
        for (Event evt:enterprise.getEventDirectory().getEventDirectory()){
            if(evt.getEventId()==cont_id){
                evt.setStatus(updateStatus);
            }
        }
    }
     private int getFirstBeneficiary(String entName){
        int ben_id=0;
         TreeMap<Integer,String> benList = new TreeMap<Integer,String>();
         for(Network net:ecosystem.getNetworkList()){
                for(WelfareEnterprise ent:net.getEnterpriseDirectory().getWelfareEnterpriseList()){
                    if(ent.getName().equals(enterprise.getName())){
                        for(WelfareOrganization org:ent.getWelfareOrganizationDirectory().getWelfareOrganizationList()){
                            if(org.getName().equals("Beneficiary Organization")){
                                for(Beneficiary ben:org.getBeneficiaryDirectory().getBeneficiaryDirectory()){ 
                                    if(entName.equals(ben.getEntName()) && ben.getAssistanceType().equals("Fund") && ben.getStatus()==null){
                                        benList.put(ben.getBeneficiaryId(),ben.getStatus());
                                    }
                                }
                            }
                        }

                    }
                }
            }
         ArrayList<Integer> keyList = new ArrayList<Integer>(benList.keySet());
         if(keyList.size()>0){
            ben_id = keyList.get(0);
         }
        return ben_id;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton assignBtn;
    private javax.swing.JTable eventJTable;
    private javax.swing.JTextField eventnameJTextField;
    private javax.swing.JTextField evtCity;
    private javax.swing.JTextField fundscollectedJTextField1;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
