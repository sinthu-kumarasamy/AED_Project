/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Health;

import Business.Beneficiaries.Beneficiary;
import Business.EcoSystem;
import Business.Enterprise.HealthEnterprise;
import Business.Enterprise.WelfareEnterprise;
import Business.Network.Network;
import Business.Organization.HealthOrganization;
import Business.Organization.Organization;
import Business.Organization.WelfareOrganization;
import Business.UserAccount.UserAccount;
import java.awt.Font;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class ManagePatientWorkAreaPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientWorkAreaPanel
     */
   
    EcoSystem ecosystem;
//    JPanel userProcessContainer;
    HealthOrganization organization;
    HealthEnterprise healthenterprise;
    
    public ManagePatientWorkAreaPanel(JPanel userProcessContainer, EcoSystem system, HealthEnterprise healthenterprise, Organization organization, UserAccount account) {
        initComponents();
        this.ecosystem = system;
        this.organization = (HealthOrganization)organization;
        this.healthenterprise = healthenterprise;
        patientTable.getTableHeader().setFont(new Font("TImes New Roman",Font.BOLD,18));
        patientTable.setRowHeight(30);
      patientTable.setRowMargin(10);
        populateTable();
        populateDoctorCombo();
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void populateDoctorCombo(){
        DoctorComboBox.removeAllItems();
        for(HealthOrganization org:healthenterprise.getHealthOrganizationDirectory().getHealthOrganizationList()){
            for(UserAccount ua:org.getUserAccountDirectory().getUserAccountList()){
                if(String.valueOf(ua.getRole()).endsWith("DoctorRole") && ua.getStatus().equals("Available")){
                    DoctorComboBox.addItem(ua.getEmployee().getName());
                }
            }
        }
    }
     private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) patientTable.getModel(); 
        model.setRowCount(0);
        for(Network net:ecosystem.getNetworkList()){
            for(WelfareEnterprise ent:net.getEnterpriseDirectory().getWelfareEnterpriseList()){
              for(WelfareOrganization org:ent.getWelfareOrganizationDirectory().getWelfareOrganizationList()){
                  if(org.getName().equals("Beneficiary Organization")){
                    for(Beneficiary ben:org.getBeneficiaryDirectory().getBeneficiaryDirectory()){
                       if(ben.getAssistanceType().equals("HealthCare") && ben.getAssignedHel()!=null){
                           if(ben.getAssignedHel().equals(healthenterprise.getName())){
                                Object[] row = new Object[model.getColumnCount()];
                                 row[0] = ben.getBeneficiaryId();
                                 row[1] = ben.getBeneficiaryName();
                                 row[2] = ben.getBeneficiaryCity();
                                 row[3] = ben.getEntName();
                                 row[4] = healthenterprise.getName();
                                 if(ben.getCheckStatus()==null){
                                     row[5]="Pending";
                                 }else if(ben.getCheckStatus().equals("Completed")){
                                     row[5]=ben.getCheckStatus();
                                 }else{
                                     row[5]=ben.getCheckStatus();
                                 }
                                 if(ben.getHealthIssue()==null){
                                     row[6]="NA";
                                 }else{
                                     row[6]=ben.getHealthIssue();
                                 }
                                 model.addRow(row);
                           }
                       }
                    }
                  }
              }
            }
        }
    
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        DoctorComboBox = new javax.swing.JComboBox<>();
        assigndocbtn = new javax.swing.JButton();
        imgLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(164, 208, 204));
        setLayout(null);

        patientTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "City", "EnterpriseName", "Hospital Name", "Status", "HealthIssue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientTable.setRowHeight(20);
        jScrollPane1.setViewportView(patientTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(550, 100, 507, 144);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Available Doctor:");
        add(jLabel1);
        jLabel1.setBounds(650, 300, 190, 22);

        DoctorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DoctorComboBox.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(153, 153, 0)));
        DoctorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorComboBoxActionPerformed(evt);
            }
        });
        add(DoctorComboBox);
        DoctorComboBox.setBounds(850, 300, 110, 30);

        assigndocbtn.setBackground(new java.awt.Color(153, 153, 0));
        assigndocbtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        assigndocbtn.setText("Assign Doctor");
        assigndocbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigndocbtnActionPerformed(evt);
            }
        });
        add(assigndocbtn);
        assigndocbtn.setBounds(770, 370, 150, 40);

        imgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\Sindhu\\Documents\\AED\\finalproject\\EcoSystem (1)\\EcoSystem\\src\\health.jpeg")); // NOI18N
        add(imgLabel);
        imgLabel.setBounds(70, 0, 1490, 820);
    }// </editor-fold>//GEN-END:initComponents

    private void assigndocbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigndocbtnActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)patientTable.getModel();
        int selectedRow = patientTable.getSelectedRow();
        if(selectedRow <0 ){
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning!",JOptionPane.WARNING_MESSAGE);
        }
        else{
            int patient_id = (int) patientTable.getValueAt(selectedRow,0);
            String doctor = DoctorComboBox.getSelectedItem().toString();
            String availability = (String) patientTable.getValueAt(selectedRow,5);
            if(!availability.equals("Pending")){
                JOptionPane.showMessageDialog(null,"This patient has been assigned to a doctor already", "Error",JOptionPane.ERROR_MESSAGE);
            }else{
                for(Network net:ecosystem.getNetworkList()){
                   for(WelfareEnterprise ent:net.getEnterpriseDirectory().getWelfareEnterpriseList()){
                      for(WelfareOrganization org:ent.getWelfareOrganizationDirectory().getWelfareOrganizationList()){
                          if(org.getName().equals("Beneficiary Organization")){
                           for(Beneficiary ben:org.getBeneficiaryDirectory().getBeneficiaryDirectory()){
                              if(ben.getBeneficiaryId()==patient_id && ben.getAssistanceType().equals("HealthCare")){
                                    ben.setCheckStatus("Doctor Assigned");
                                     ben.setAssignedDoc(doctor);
                                    populateTable();
                               }
                            }
                          }
                        }
                    }
                  }
            }
         }
    }//GEN-LAST:event_assigndocbtnActionPerformed

    private void DoctorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DoctorComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DoctorComboBox;
    private javax.swing.JButton assigndocbtn;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientTable;
    // End of variables declaration//GEN-END:variables
}
